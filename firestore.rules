rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 사용자 컬렉션 규칙
    match /users/{userId} {
      // 읽기: 모든 인증된 사용자 (프로필 조회용)
      allow read: if request.auth != null;
      
      // 쓰기: 본인 또는 관리자만 쓰기 가능
      allow create: if request.auth != null && 
        (request.auth.uid == userId || 
         request.auth.token.email == "juhyundon82@gmail.com");
      allow update: if request.auth != null && 
        (request.auth.uid == userId || 
         request.auth.token.email == "juhyundon82@gmail.com");
      allow delete: if request.auth != null && 
        (request.auth.uid == userId || 
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // DM 스레드 컬렉션 규칙 (임시로 모든 접근 허용)
    match /chatThreads/{threadId} {
      allow read, write: if request.auth != null;
    }

    // 관리자 컬렉션 규칙
    match /admins/{adminId} {
      // 읽기: 모든 인증된 사용자 (관리자 확인은 애플리케이션 레벨에서)
      allow read: if request.auth != null;
      
      // 쓰기: 모든 인증된 사용자 (관리자 확인은 애플리케이션 레벨에서)
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // 게시글 컬렉션 규칙
    match /posts/{postId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 수정: 조회수 증가를 위해 모든 사용자 허용 (로그인 불필요)
      allow update: if true;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 댓글 컬렉션 규칙
    match /comments/{commentId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 작성자만 수정 가능
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 대댓글 컬렉션 규칙
    match /replies/{replyId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 작성자만 수정 가능
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 갤러리 컬렉션 규칙
    match /gallery/{itemId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.uploaderId;
      // 수정: 조회수 증가를 위해 모든 사용자 허용 (로그인 불필요)
      allow update: if true;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.uploaderId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 갤러리 댓글 컬렉션 규칙
    match /galleryComments/{commentId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 작성자만 수정 가능
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 노래방 게시글 컬렉션 규칙
    match /karaokePosts/{postId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 수정: 조회수 증가를 위해 모든 사용자 허용 (로그인 불필요)
      allow update: if true;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 노래방 댓글 컬렉션 규칙
    match /karaokeComments/{commentId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 작성자만 수정 가능
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 건강정보 게시글 컬렉션 규칙
    match /healthPosts/{postId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 수정: 작성자만 가능하지만 조회수 증가는 모든 인증된 사용자 가능
      allow update: if request.auth != null;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 건강정보 댓글 컬렉션 규칙
    match /healthComments/{commentId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 요리 게시글 컬렉션 규칙
    match /cookingPosts/{postId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 수정: 조회수 증가를 위해 모든 사용자 허용 (로그인 불필요)
      allow update: if true;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 요리 댓글 컬렉션 규칙
    match /cookingComments/{commentId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 개똥철학 게시글 컬렉션 규칙
    match /philosophy/{postId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 수정: 조회수 증가를 위해 모든 사용자 허용 (로그인 불필요)
      allow update: if true;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 개똥철학 컬렉션 전체 접근 허용
    match /philosophy/{document=**} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 수정: 조회수 증가를 위해 모든 사용자 허용 (로그인 불필요)
      allow update: if true;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 개똥철학 게시글 컬렉션 규칙 (기존 호환성)
    match /philosophyPosts/{postId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      // 인증된 사용자만 작성 가능
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // 수정: 조회수 증가를 위해 모든 사용자 허용 (로그인 불필요)
      allow update: if true;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 개똥철학 댓글 컬렉션 규칙
    match /philosophyComments/{commentId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
      // 작성자 또는 관리자만 삭제 가능
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
    // 메시지 컬렉션 규칙
    match /messages/{messageId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
    }
    
    // 채팅방 컬렉션 규칙
    match /chatrooms/{roomId} {
      // 읽기: 채팅방 참여자만
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // 쓰기: 채팅방 참여자만
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow delete: if request.auth != null && 
        request.auth.uid in resource.data.participants;
    }
    
    // 접속자 컬렉션 규칙
    match /onlineUsers/{userId} {
      // 읽기: 모든 인증된 사용자
      allow read: if true;
      
      // 쓰기: 모든 인증된 사용자 (접속자 등록용)
      allow create: if request.auth != null;
      
      // 수정/삭제: 본인만
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // 알림 컬렉션 규칙
    match /notifications/{notificationId} {
      // 읽기: 모든 사용자
      allow read: if true;
      
      // 쓰기: 인증된 사용자 모두 (채팅 알림용)
      allow create: if request.auth != null;
      
      // 수정/삭제: 관리자만
      allow update: if request.auth != null && 
        (request.auth.token.role == "admin" || 
         request.auth.token.email == "admin@tapgol.com");
      allow delete: if request.auth != null && 
        (request.auth.token.role == "admin" || 
         request.auth.token.email == "admin@tapgol.com");
    }
    
    // 사용자별 알림 컬렉션 규칙
    match /userNotifications/{notificationId} {
      // 읽기: 해당 사용자만
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 쓰기: 인증된 사용자 모두 (알림 생성용)
      allow create: if request.auth != null;
      
      // 수정/삭제: 해당 사용자만
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // 사용자 활동 추적 컬렉션 규칙
    match /userActivities/{activityId} {
      // 읽기: 해당 사용자만
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 쓰기: 인증된 사용자 모두 (활동 기록용)
      allow create: if request.auth != null;
      
      // 수정/삭제: 해당 사용자만
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // 활동 알림 컬렉션 규칙
    match /activityNotifications/{notificationId} {
      // 읽기: 해당 사용자만
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // 쓰기: 인증된 사용자 모두 (활동 알림 생성용)
      allow create: if request.auth != null;
      
      // 수정/삭제: 해당 사용자만
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // 이벤트 컬렉션 규칙
    match /events/{eventId} {
      // 읽기: 모든 인증된 사용자
      allow read: if request.auth != null;
      
      // 쓰기: 관리자만 (필요시 수정)
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // 채팅 메시지 컬렉션 규칙 (메인 채팅 + 1:1 DM)
    match /chatMessages/{messageId} {
      // 읽기: 모든 사용자 허용 (로그인 불필요)
      allow read: if true;
      
      // 쓰기: 인증된 사용자만, 작성자 ID가 일치해야 함
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      
      // 수정/삭제: 작성자 또는 관리자만
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId ||
         request.auth.token.email == "juhyundon82@gmail.com");
    }
    
     // 공원별 채팅 메시지 컬렉션 규칙
     match /parkChats/{messageId} {
       // 모든 사용자가 읽기 가능 (로그인 불필요)
       allow read: if true;
       
       // 쓰기: 인증된 사용자만, 작성자 ID가 일치해야 함
       allow create: if request.auth != null && 
         request.auth.uid == request.resource.data.authorId;
       
       // 수정/삭제: 작성자 또는 관리자만
       allow update: if request.auth != null && 
         (request.auth.uid == resource.data.authorId ||
          request.auth.token.email == "juhyundon82@gmail.com");
       allow delete: if request.auth != null && 
         (request.auth.uid == resource.data.authorId ||
          request.auth.token.email == "juhyundon82@gmail.com");
     }
     
     // 신고 컬렉션 규칙 (모든 사용자 허용)
     match /reports/{reportId} {
       allow read, write: if true;
     }
     
     // 지혜 컬렉션 규칙 (모든 사용자 허용)
     match /wisdoms/{wisdomId} {
       allow read, write: if true;
     }
     
     // 온라인 사용자 컬렉션 규칙 (모든 사용자 허용)
     match /onlineUsers/{userId} {
       allow read, write: if true;
     }
     
    // 중고장터 컬렉션 규칙
    match /marketplace/{postId} {
      // 모든 사용자가 읽기 가능 (로그인 불필요)
      allow read: if true;
      
      // 생성: 인증된 사용자만
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      
      // 수정: 조회수 증가를 위해 모든 사용자 허용 (로그인 불필요)
      allow update: if true;
       
       // 삭제: 작성자 또는 관리자만
       allow delete: if request.auth != null && 
         (request.auth.uid == resource.data.authorId ||
          request.auth.token.email == "juhyundon82@gmail.com");
     }
     
     // 미확인 메시지 컬렉션 규칙 (임시로 더 관대하게)
     match /unreadMessages/{unreadId} {
       // 읽기: 모든 인증된 사용자 (임시)
       allow read: if request.auth != null;
       
       // 쓰기: 모든 인증된 사용자 (임시)
       allow create: if request.auth != null;
       allow update: if request.auth != null;
       allow delete: if request.auth != null;
     }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // 갤러리 폴더 규칙
    match /gallery/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.resource.size < 50 * 1024 * 1024 // 50MB 제한
        && request.resource.contentType.matches('image/.*|video/.*'); // 이미지/비디오만 허용
      allow delete: if request.auth != null 
        && fileName.matches(request.auth.uid + '_.*');
    }
    
    // 노래방 폴더 규칙
    match /karaoke/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && request.resource.size < 100 * 1024 * 1024 // 100MB 제한
        && request.resource.contentType.matches('video/.*'); // 비디오만 허용
      allow delete: if request.auth != null 
        && fileName.matches(request.auth.uid + '_.*');
    }
    
    // 기본 규칙 - 모든 접근 거부
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
